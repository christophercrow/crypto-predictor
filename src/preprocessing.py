# src/preprocessing.py

import pandas as pd
import os

def load_data(crypto_id='bitcoin'):
    """
    Load raw cryptocurrency data from the CSV file.
    
    Args:
        crypto_id (str): Cryptocurrency identifier (e.g., 'bitcoin').
    
    Returns:
        pd.DataFrame: DataFrame containing the raw data.
    """
    data_dir = os.path.join(os.path.dirname(__file__), '..', 'data')
    file_path = os.path.join(data_dir, f'{crypto_id}_prices.csv')
    df = pd.read_csv(file_path, parse_dates=['date'])
    return df

def clean_data(df):
    """
    Clean the dataset by removing duplicates and filling missing values.
    
    Args:
        df (pd.DataFrame): Raw data DataFrame.
    
    Returns:
        pd.DataFrame: Cleaned DataFrame.
    """
    # Remove duplicate rows
    df = df.drop_duplicates()
    
    # Fill missing values with forward fill method
    df = df.fillna(method='ffill')
    return df

def feature_engineering(df):
    """
    Perform feature engineering to create additional informative features.
    
    Args:
        df (pd.DataFrame): Cleaned DataFrame.
    
    Returns:
        pd.DataFrame: DataFrame with new features.
    """
    # Sort data by date and set date as the index
    df = df.sort_values('date')
    df.set_index('date', inplace=True)
    
    # Create lag features (e.g., previous day's price, 2-day lag, etc.)
    for lag in range(1, 4):  # Creating lag features for 1 to 3 days
        df[f'price_lag_{lag}'] = df['price'].shift(lag)
    
    # Create rolling window features for short-term trends
    df['rolling_mean_3'] = df['price'].rolling(window=3).mean()
    df['rolling_std_3'] = df['price'].rolling(window=3).std()
    
    # Remove rows with NaN values generated by lag and rolling calculations
    df.dropna(inplace=True)
    return df

if __name__ == "__main__":
    # Load the raw data
    df = load_data()
    print("Raw Data:")
    print(df.head())

    # Clean the data
    df_clean = clean_data(df)
    
    # Apply feature engineering
    df_features = feature_engineering(df_clean)
    
    print("Preprocessed Data with Engineered Features:")
    print(df_features.head())
    
    # Save the preprocessed data for later steps (e.g., model training)
    output_path = os.path.join(os.path.dirname(__file__), '..', 'data', 'bitcoin_prices_preprocessed.csv')
    df_features.to_csv(output_path)
    print(f"Preprocessed data saved to {output_path}")
